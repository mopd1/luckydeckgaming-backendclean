const express = require('express');
const router = express.Router();
const authMiddleware = require('../middleware/auth');
const { sequelize, User, PokerHand } = require('../models');

/**
 * Record a completed poker hand
 * POST /api/poker/record-hand
 */
router.post('/record-hand', authMiddleware, async (req, res) => {
    try {
        const userId = req.user.id;
        const {
            tableId,
            handNumber,
            stakeLevel,
            gameType,
            playerCards,
            communityCards,
            potSize,
            handStrength,
            result,
            chipsWon
        } = req.body;

        const hand = await PokerHand.create({
            user_id: userId,
            table_id: tableId,
            hand_number: handNumber,
            stake_level: stakeLevel,
            game_type: gameType || 'texas_holdem',
            player_cards: JSON.stringify(playerCards),
            community_cards: JSON.stringify(communityCards),
            pot_size: potSize,
            hand_strength: handStrength,
            result: result,
            chips_won: chipsWon
        });

        return res.status(201).json({
            success: true,
            data: hand
        });
    } catch (error) {
        console.error('Error recording poker hand:', error);
        return res.status(500).json({
            success: false,
            error: 'Failed to record poker hand'
        });
    }
});

/**
 * Get user poker hand history
 * GET /api/poker/history
 */
router.get('/history', authMiddleware, async (req, res) => {
    try {
        const userId = req.user.id;
        const {
            startDate,
            endDate,
            stakeLevel,
            gameType,
            result,
            limit = 50,
            offset = 0
        } = req.query;

        // Build query conditions
        const where = { user_id: userId };
        
        if (stakeLevel) where.stake_level = stakeLevel;
        if (gameType) where.game_type = gameType;
        if (result) where.result = result;
        
        if (startDate && endDate) {
            where.played_at = {
                [sequelize.Op.between]: [new Date(startDate), new Date(endDate)]
            };
        } else if (startDate) {
            where.played_at = {
                [sequelize.Op.gte]: new Date(startDate)
            };
        } else if (endDate) {
            where.played_at = {
                [sequelize.Op.lte]: new Date(endDate)
            };
        }

        // Get hands
        const hands = await PokerHand.findAndCountAll({
            where,
            limit: parseInt(limit, 10),
            offset: parseInt(offset, 10),
            order: [['played_at', 'DESC']]
        });

        return res.status(200).json({
            success: true,
            count: hands.count,
            data: hands.rows
        });
    } catch (error) {
        console.error('Error fetching poker hand history:', error);
        return res.status(500).json({
            success: false,
            error: 'Failed to fetch poker hand history'
        });
    }
});

module.exports = router;
